#Práctica 1 - Introducción al lenguaje de programacíon en R

#¿Qué es R?
#R es un lenguaje de programación orientado a objetos. Este es un lenguaje de interpretación y no de compilación, es decir, no necesitamos generar el código y compilarlo para poder ver el resultado (como por ejemplo en C). Al tiempo que escribimos la instrucción y la ejecutamos, el resultado será visualizado inmediatamente.

#Es un lenguaje gratuito y de código abierto, desarrollado por una comunidad activa e interesada en la exploración y tratamiento de datos. Aunque en biología, el uso principal sea estadística, R NO ES SOLO UN PROGRAMA PARA ESTADÍSTICA, es un lenguaje que contiene modulos desarrollados para este objetivo. Dichos módulos son denominados paquétes y cada paquete es construido para un objetivo específico.


packageDescription(pkg = 'lattice',fields = 'Description')

## [1] "A powerful and elegant high-level data visualization\n  system inspired by Trellis graphics, with an emphasis on\n  multivariate data. Lattice is sufficient for typical graphics needs,\n  and is also flexible enough to handle most nonstandard requirements.\n  See ?Lattice for an introduction."

packageDescription(pkg = 'base',fields = 'Description')

## [1] "Base R functions."

#Vaya a The Comprehensive R Archive Network -> Packages -> Sort by name. Busque los siguientes paquetes y revise la descripción: raster, ape, vegan, landsat8. Ahora, podemos entender qué estadística es solo una de las múltiples cosas que podríamos hacer en R.

packageDescription(pkg = 'raster',fields = 'Description')
packageDescription(pkg = 'ape',fields = 'Description')
packageDescription(pkg = 'vegan',fields = 'Description')
packageDescription(pkg = 'landsat8',fields = 'Description')

#¿Qué es Rstudio?
#Rstudio es un entorno de desarrollo integrado (IDE), es un programa que permite utilizar R de una forma cómoda y amable para el usuario.

#¿Qué es GitHub?
#Es un manejador de código en la nube. Permite a los desarrolladores mantener su código con acceso libre al público (compartir), manteniendo activo el manejador de control de cambios. En realidad, GitHub es una compañia sin ánimo de lucro que presta el servicio de almacenamiento. Existen otros repositorios como GitLab.

#Comencemos con R
#Lo primero que debemos hacer es descargar e instalar ambos programas, R y Rstudio, tal como lo hicimos en el curso de coursera.

#Creando un objeto
#Un objeto es una ‘caja’ que guarda valores o cosas, estas cajas pueden ser creadas, editadas y eliminadas. Para crear un objeto debemos tener un simbolo de asignación (operador). En R se pueden usar dos tipos, sin embargo en otros lenguajes ambos, podrían ser definidos como dos cosas distintas.

x = 2
x
# [1] 2
y <- 3
y
# [1] 3
4 -> z
z
# [1] 4

#Ejercicio: Reasigne 5 a la letra z, usando el operador <-, ahora, pregunte ¿qué es z?
  
#Cuando el objeto existe y es reasignado, el valor anterior es reemplazado. Ese objeto tambien puede ser reasignado con el resultado de una operación.

z<- 10 + 2

z
# [1] 12

z <- 3 + rnorm(1)
z
# [1] 2.240545

#Ejercicio: Revisemos qué es rnorm(1). Empecemos buscando la función en help o ?rnorm

?rnorm

#The Normal Distribution
#Description
#Density, distribution function, quantile function and random generation for the normal distribution with mean equal to mean and standard deviation equal to sd.
#rnorm(n, mean = 0, sd = 1)

#Múltiples secuencias entereras pueden ser guardadas en objetos

# Crear un vector en secuencia de 1 a 10
x <- 1:10

# Ver el vector
x
##  [1]  1  2  3  4  5  6  7  8  9 10

#incluso, podemos hacer operaciones con cada uno de los números de las secuencias

# Sumar 1 a cada número
x + 1
##  [1]  2  3  4  5  6  7  8  9 10 11

#Ejercicio: multiplique x por 2 y sumele 1 y dividalo por 1.5, ese resultado elevelo al cuadrado. Esto se escribe igual que en una calculadora manual.

((x*2)+1/1.5)^2
#[1]   7.111111  21.777778  44.444444  75.111111 113.777778
#[6] 160.444444 215.111111 277.777778 348.444444 427.111111

#Clases de objetos
#Los objetos no sólo pueden ser un número u operaciones, los objetos pueden ser de diferentes clases.

#R tiene cinco clases básicas de vectores:
  
#character (letras) numeric (números reales) integer (números enteros) complex (números complejos) *logical (verdadero/falso o True/False)

animales <- c('perro','gato','fara')
animales
## [1] "perro" "gato"  "fara"

frases <- 'El gato se comió el fara'
frases
## [1] "El gato se comió el fara"

nuemeros <- rep(x = 1:3,3)/1.5
nuemeros

## [1] 0.6666667 1.3333333 2.0000000 0.6666667 1.3333333 2.0000000 0.6666667

## [8] 1.3333333 2.0000000

enteros <- seq(from = 1,to = 10,by = 2)
enteros
## [1] 1 3 5 7 9

complejos <- c(2i,5i, 3i)
complejos
## [1] 0+2i 0+5i 0+3i

logicos <- c(T,F,TRUE,FALSE)
logicos
## [1]  TRUE FALSE  TRUE FALSE

#Ejercicio: tome cualquier objeto anterior y preguntele la clase

class(complejos)
#[1] "complex"

#Tambien podemos generar vectores con cosas internas de distintos tipos, pero a la final todo el vector tendrá una sola clase

# Crear un vector con problemas de clases

prueba <- c(1, "perro", FALSE, "gato", 1.5)

# Ver el vector
prueba
[1] "character"
#Ejercicio: ¿Qué clase tiene el vector?

class(prueba)

#[1] "character"

#Otro tipo de objetos con el que nos podemos encontrar son los vectores que contienen niveles

# Creemos un factor con niveles
grupo_altura <- factor(c("mediano", "pequeño", "grande", "muy grande"), levels=c("pequeño", "mediano", "grande", "muy grande"))

# Veamos el factor
grupo_altura

## [1] mediano    pequeño    grande     muy grande
## Levels: pequeño mediano grande muy grande

#Ejercicio: Hasta el momento hemnos generado varios vectores/objetos/variables, podemos listarlas usando la función ls() o ls.str(), la cual nos permite, no solo ver las variables, sino el tipo de cada una.

ls()
#[1] "animales"           "camioneta"          "carniherbi49"   
#[4] "carro"              "clases"             "cochera"        #[7] "complejos"          "con"                "datos"          #[10] "datos_2"            "display_swirl_file" "enteros"       
#[13] "estratos"           "find_course"        "frases"        #[16] "grupo_altura"       "inicial"            "iris"          #[19] "k"                  "logicos"            "long"          #[22] "meanC"              "meanH"              "mi_arreglo"    #[25] "mi_matriz"          "mi_vector"          "nlong"         #[28] "nuemeros"           "ok"                 "pesos"         #[31] "pesosH"             "prueba"             "sdC"           #[34] "sdH"                "sin"                "x"             #[37] "y"                  "z"

ls.str()
#Ejemplo: animales :  chr [1:3] "perro" "gato" "fara"
#camioneta : List of 4
#$ color     : chr "azul"
#$ nllantas  : num 4
#$ marca     : chr "BMW"
#$ ncilindros: num 6

#Matrices, DataFrames, Listas

#Matrices
#Es un conjunto de vectores ordenado por filas y columnas; cada elemento interno es del mismo tipo.

# ¿Cuál es la diferencia entre ambos objetos?

vector1<- seq(1:12)

vector1
##  [1]  1  2  3  4  5  6  7  8  9 10 11 12

#Sacó sólo una secuencia con un sólo número de fila, vector lineal

matrix1<- matrix(data = 1:12,nrow = 3,ncol = 4)
matrix1
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12

#se pueden especificar el número de filas y columnas

#Para poder extraer posiciones específicas de un vector o de una matriz utilizamos []. Si estamos extrayendo de un vector lineal, solo tendremos una dimensión 1. Si extraemos una posición dentro de una matriz debemos asignar la posición en la columna y en la fila [fila,columna]

# El objeto número 6

vector1<- seq(1:12)

vector1[6]
## [1] 6

vector1
##  [1]  1  2  3  4  5  6  7  8  9 10 11 12

# el objeto de la fila 2, columna 3

matrix1<- matrix(data = 1:12,nrow = 3,ncol = 4)

matrix1[2,3]

## [1] 8

matrix1
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12

#Arreglos
#Imaginemos múltiples matrices una detras de la otra, esto se le conoce como arreglo

# el objeto de la fila 2, columna 3
matrix1<- matrix(data = 1:12,nrow = 3,ncol = 4)

matrix1[2,3]
## [1] 8
matrix1
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
# el objeto de la fila 2, columna 3

arreglo<- array(data = 1:12,dim = c(3,4,3))

arreglo[2,4,3]
## [1] 11

arreglo
## , , 1
## 
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
## 
## , , 2
## 
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
## 
## , , 3
## 
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12

vector1<-rep(1:4,3)
vector2<- seq(2,24,2)
array(data = c(vector1,vector2),dim = c(3,4,2))
## , , 1
## 
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    3    2
## [2,]    2    1    4    3
## [3,]    3    2    1    4
## 
## , , 2
## 
##      [,1] [,2] [,3] [,4]
## [1,]    2    8   14   20
## [2,]    4   10   16   22
## [3,]    6   12   18   24

#Ejercicio: Cree un una secuencia que repita los números de 1 a 4, 3 veces y asignela a un objeto llamado vector1. Ahora, cree una secuencia de números pares del 2 al 24 y asignela a un objeto llamado vector2. Genere un arreglo con ambos vectores y busque la columna 2, fila 1 de la segunda matriz y para la primera.

vector1<-rep(1:4,3)
vector1
##  [1] 1 2 3 4 1 2 3 4 1 2 3 4

vector2<-seq(2,24,2)
vector2
##  [1]  2  4  6  8 10 12 14 16 18 20 22 24

array(data = c(vector1,vector2),dim = c(1,2,2))
#, , 1

#[,1] [,2]
#[1,]    1    2

#, , 2

#[,1] [,2]
#[1,]    3    4

array(data = c(vector1,vector2),dim = c(1,2,1))
#, , 1

#[,1] [,2]
#[1,]    1    2

#Data.Frames
#Son similares a las matrices, pero cada columna puede tener diferentes clases. Cada columna tiene un nombre y es posible asiganar un nombre a cada fila.

# Cargando un dataframe interno

data(iris)

iris

##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
## 1            5.1         3.5          1.4         0.2     setosa
## 2            4.9         3.0          1.4         0.2     setosa
## 3            4.7         3.2          1.3         0.2     setosa
## 4            4.6         3.1          1.5         0.2     setosa
## 5            5.0         3.6          1.4         0.2     setosa
## 6            5.4         3.9          1.7         0.4     setosa
## 7            4.6         3.4          1.4         0.3     setosa
## 8            5.0         3.4          1.5         0.2     setosa
## 9            4.4         2.9          1.4         0.2     setosa
## 10           4.9         3.1          1.5         0.1     setosa
## 11           5.4         3.7          1.5         0.2     setosa
## 12           4.8         3.4          1.6         0.2     setosa
## 13           4.8         3.0          1.4         0.1     setosa
## 14           4.3         3.0          1.1         0.1     setosa
## 15           5.8         4.0          1.2         0.2     setosa
## 16           5.7         4.4          1.5         0.4     setosa
## 17           5.4         3.9          1.3         0.4     setosa
## 18           5.1         3.5          1.4         0.3     setosa
## 19           5.7         3.8          1.7         0.3     setosa
## 20           5.1         3.8          1.5         0.3     setosa
## 21           5.4         3.4          1.7         0.2     setosa
## 22           5.1         3.7          1.5         0.4     setosa
## 23           4.6         3.6          1.0         0.2     setosa
## 24           5.1         3.3          1.7         0.5     setosa
## 25           4.8         3.4          1.9         0.2     setosa
## 26           5.0         3.0          1.6         0.2     setosa
## 27           5.0         3.4          1.6         0.4     setosa
## 28           5.2         3.5          1.5         0.2     setosa
## 29           5.2         3.4          1.4         0.2     setosa
## 30           4.7         3.2          1.6         0.2     setosa
## 31           4.8         3.1          1.6         0.2     setosa
## 32           5.4         3.4          1.5         0.4     setosa
## 33           5.2         4.1          1.5         0.1     setosa
## 34           5.5         4.2          1.4         0.2     setosa
## 35           4.9         3.1          1.5         0.2     setosa
## 36           5.0         3.2          1.2         0.2     setosa
## 37           5.5         3.5          1.3         0.2     setosa
## 38           4.9         3.6          1.4         0.1     setosa
## 39           4.4         3.0          1.3         0.2     setosa
## 40           5.1         3.4          1.5         0.2     setosa
## 41           5.0         3.5          1.3         0.3     setosa
## 42           4.5         2.3          1.3         0.3     setosa
## 43           4.4         3.2          1.3         0.2     setosa
## 44           5.0         3.5          1.6         0.6     setosa
## 45           5.1         3.8          1.9         0.4     setosa
## 46           4.8         3.0          1.4         0.3     setosa
## 47           5.1         3.8          1.6         0.2     setosa
## 48           4.6         3.2          1.4         0.2     setosa
## 49           5.3         3.7          1.5         0.2     setosa
## 50           5.0         3.3          1.4         0.2     setosa
## 51           7.0         3.2          4.7         1.4 versicolor
## 52           6.4         3.2          4.5         1.5 versicolor
## 53           6.9         3.1          4.9         1.5 versicolor
## 54           5.5         2.3          4.0         1.3 versicolor
## 55           6.5         2.8          4.6         1.5 versicolor
## 56           5.7         2.8          4.5         1.3 versicolor
## 57           6.3         3.3          4.7         1.6 versicolor
## 58           4.9         2.4          3.3         1.0 versicolor
## 59           6.6         2.9          4.6         1.3 versicolor
## 60           5.2         2.7          3.9         1.4 versicolor
## 61           5.0         2.0          3.5         1.0 versicolor
## 62           5.9         3.0          4.2         1.5 versicolor
## 63           6.0         2.2          4.0         1.0 versicolor
## 64           6.1         2.9          4.7         1.4 versicolor
## 65           5.6         2.9          3.6         1.3 versicolor
## 66           6.7         3.1          4.4         1.4 versicolor
## 67           5.6         3.0          4.5         1.5 versicolor
## 68           5.8         2.7          4.1         1.0 versicolor
## 69           6.2         2.2          4.5         1.5 versicolor
## 70           5.6         2.5          3.9         1.1 versicolor
## 71           5.9         3.2          4.8         1.8 versicolor
## 72           6.1         2.8          4.0         1.3 versicolor
## 73           6.3         2.5          4.9         1.5 versicolor
## 74           6.1         2.8          4.7         1.2 versicolor
## 75           6.4         2.9          4.3         1.3 versicolor
## 76           6.6         3.0          4.4         1.4 versicolor
## 77           6.8         2.8          4.8         1.4 versicolor
## 78           6.7         3.0          5.0         1.7 versicolor
## 79           6.0         2.9          4.5         1.5 versicolor
## 80           5.7         2.6          3.5         1.0 versicolor
## 81           5.5         2.4          3.8         1.1 versicolor
## 82           5.5         2.4          3.7         1.0 versicolor
## 83           5.8         2.7          3.9         1.2 versicolor
## 84           6.0         2.7          5.1         1.6 versicolor
## 85           5.4         3.0          4.5         1.5 versicolor
## 86           6.0         3.4          4.5         1.6 versicolor
## 87           6.7         3.1          4.7         1.5 versicolor
## 88           6.3         2.3          4.4         1.3 versicolor
## 89           5.6         3.0          4.1         1.3 versicolor
## 90           5.5         2.5          4.0         1.3 versicolor
## 91           5.5         2.6          4.4         1.2 versicolor
## 92           6.1         3.0          4.6         1.4 versicolor
## 93           5.8         2.6          4.0         1.2 versicolor
## 94           5.0         2.3          3.3         1.0 versicolor
## 95           5.6         2.7          4.2         1.3 versicolor
## 96           5.7         3.0          4.2         1.2 versicolor
## 97           5.7         2.9          4.2         1.3 versicolor
## 98           6.2         2.9          4.3         1.3 versicolor
## 99           5.1         2.5          3.0         1.1 versicolor
## 100          5.7         2.8          4.1         1.3 versicolor
## 101          6.3         3.3          6.0         2.5  virginica
## 102          5.8         2.7          5.1         1.9  virginica
## 103          7.1         3.0          5.9         2.1  virginica
## 104          6.3         2.9          5.6         1.8  virginica
## 105          6.5         3.0          5.8         2.2  virginica
## 106          7.6         3.0          6.6         2.1  virginica
## 107          4.9         2.5          4.5         1.7  virginica
## 108          7.3         2.9          6.3         1.8  virginica
## 109          6.7         2.5          5.8         1.8  virginica
## 110          7.2         3.6          6.1         2.5  virginica
## 111          6.5         3.2          5.1         2.0  virginica
## 112          6.4         2.7          5.3         1.9  virginica
## 113          6.8         3.0          5.5         2.1  virginica
## 114          5.7         2.5          5.0         2.0  virginica
## 115          5.8         2.8          5.1         2.4  virginica
## 116          6.4         3.2          5.3         2.3  virginica
## 117          6.5         3.0          5.5         1.8  virginica
## 118          7.7         3.8          6.7         2.2  virginica
## 119          7.7         2.6          6.9         2.3  virginica
## 120          6.0         2.2          5.0         1.5  virginica
## 121          6.9         3.2          5.7         2.3  virginica
## 122          5.6         2.8          4.9         2.0  virginica
## 123          7.7         2.8          6.7         2.0  virginica
## 124          6.3         2.7          4.9         1.8  virginica
## 125          6.7         3.3          5.7         2.1  virginica
## 126          7.2         3.2          6.0         1.8  virginica
## 127          6.2         2.8          4.8         1.8  virginica
## 128          6.1         3.0          4.9         1.8  virginica
## 129          6.4         2.8          5.6         2.1  virginica
## 130          7.2         3.0          5.8         1.6  virginica
## 131          7.4         2.8          6.1         1.9  virginica
## 132          7.9         3.8          6.4         2.0  virginica
## 133          6.4         2.8          5.6         2.2  virginica
## 134          6.3         2.8          5.1         1.5  virginica
## 135          6.1         2.6          5.6         1.4  virginica
## 136          7.7         3.0          6.1         2.3  virginica
## 137          6.3         3.4          5.6         2.4  virginica
## 138          6.4         3.1          5.5         1.8  virginica
## 139          6.0         3.0          4.8         1.8  virginica
## 140          6.9         3.1          5.4         2.1  virginica
## 141          6.7         3.1          5.6         2.4  virginica
## 142          6.9         3.1          5.1         2.3  virginica
## 143          5.8         2.7          5.1         1.9  virginica
## 144          6.8         3.2          5.9         2.3  virginica
## 145          6.7         3.3          5.7         2.5  virginica
## 146          6.7         3.0          5.2         2.3  virginica
## 147          6.3         2.5          5.0         1.9  virginica
## 148          6.5         3.0          5.2         2.0  virginica
## 149          6.2         3.4          5.4         2.3  virginica
## 150          5.9         3.0          5.1         1.8  virginica

class(iris)
## [1] "data.frame"

#Podemos extraer columnas usando el nombre de cada una.

# Longitud del Sepalo

iris$Sepal.Length

##   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4
##  [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5
##  [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0
##  [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8
##  [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4
##  [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8
## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7
## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7
## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9
# Longitud del Sepalo del individuo 36

iris$Sepal.Length[36]
## [1] 5

iris[36,1]
## [1] 5

#Ejercicio: tome la primera columna y la segunda, concatenelas con c() ¿Qué encuentra? Ahora, tome amabas columnas y use la funcion cbind(), asignelo a un objeto llamado minuevatabla. Haga lo mismo, con las filas del 1:5 y del 10:30, use primero c() y luego rbind() ¿Qué encuentra?

c(iris$Sepal.Length,iris$Sepal.Width)

#  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7
#[17] 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4
#[33] 5.2 5.5 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6
#[49] 5.3 5.0 7.0 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1
#[65] 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7
#[81] 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7
#[97] 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4
#[113] 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1
#[129] 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8
#[145] 6.7 6.7 6.3 6.5 6.2 5.9 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1
#[161] 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0
#[177] 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 3.5 3.6 3.0 3.4 3.5 2.3
#[193] 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3 2.8 2.8 3.3 2.4
#[209] 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8 2.5 2.8
#[225] 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5
#[241] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0
#[257] 2.5 2.9 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8
#[273] 2.8 2.7 3.3 3.2 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1
#[289] 3.0 3.1 3.1 3.1 2.7 3.2 3.3 3.0 2.5 3.0 3.4 3.0

minuevatabla<-cbind(c(iris$Sepal.Length,iris$Sepal.Width))

minuevatabla

#Haga lo mismo, con las filas del 1:5 y del 10:30, use primero c() y luego rbind() ¿Qué encuentra?

dos<-iris(c[1:5],iris[10:30])
rbind(dos)


#Busque el archivo suministrado por el profesor, carguelo a R y revise qué contien. Extraiga las 5 primeras columnas con las 10 primeras filas, escriba esa nueva matriz como csv en su computador.

setwd("C:/Users/BODEGA-/Desktop/ESTADISTICA practica/Semana1_IntroR/")

read.csv("Semana1_IntroR.Rmd")
